#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('photo_blog:server');
var http = require('http');
var mongoose = require('mongoose');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  initDB(function () {
    debug('Listening on ' + bind);
    console.log('Listening on ' + bind);
  });
  //debug('Listening on ' + bind);
}

function initDB(callback) {
  var c = {
    "MongoDB": {
      "url": "mongodb://localhost:27017/blog",
      "poolSize": 5
    }
  };
  var url = c.MongoDB.url;
  var poolSize = c.MongoDB.poolSize;

  var options = {
    server: {
      poolSize: poolSize
    },
    replset: {
      keepAlive: 1
    }
  };

  var callbackCalled = false;

  var db = mongoose.connection;

  db.on('error', function (err) {
    console.error('Error occurred while establishing new MongoDB connection. ' + err);
  });

  db.on('connected', function() {
    console.log('Successfully connected to MongoDB on "' + url + '" with pool size: ' + poolSize);
    if(!callbackCalled) {
      callbackCalled = true;
      callback();
    }
  });

  db.on('disconnected', function() {
    console.error('Connection lost or not established with MongoDB on "' + url + '" Reconnecting in 5s.');
    setTimeout(connect, 5000);

    if(!callbackCalled) {
      callbackCalled = true;
      callback();
    }
  });

  function connect(){
    console.log('Try to establish MongoDB connection on "' + url + '" with pool size: ' + poolSize);
    mongoose.connect(url, options);
  }

  connect();
};